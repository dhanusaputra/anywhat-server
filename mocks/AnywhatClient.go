// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/dhanusaputra/anywhat-server/api/pb"
)

// AnywhatClient is an autogenerated mock type for the AnywhatClient type
type AnywhatClient struct {
	mock.Mock
}

// CreateAnything provides a mock function with given fields: ctx, in, opts
func (_m *AnywhatClient) CreateAnything(ctx context.Context, in *pb.CreateAnythingRequest, opts ...grpc.CallOption) (*pb.CreateAnythingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.CreateAnythingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateAnythingRequest, ...grpc.CallOption) *pb.CreateAnythingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreateAnythingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateAnythingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnything provides a mock function with given fields: ctx, in, opts
func (_m *AnywhatClient) DeleteAnything(ctx context.Context, in *pb.DeleteAnythingRequest, opts ...grpc.CallOption) (*pb.DeleteAnythingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteAnythingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteAnythingRequest, ...grpc.CallOption) *pb.DeleteAnythingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteAnythingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteAnythingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnything provides a mock function with given fields: ctx, in, opts
func (_m *AnywhatClient) GetAnything(ctx context.Context, in *pb.GetAnythingRequest, opts ...grpc.CallOption) (*pb.GetAnythingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAnythingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAnythingRequest, ...grpc.CallOption) *pb.GetAnythingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAnythingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAnythingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnything provides a mock function with given fields: ctx, in, opts
func (_m *AnywhatClient) ListAnything(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ListAnythingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ListAnythingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *pb.ListAnythingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ListAnythingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnything provides a mock function with given fields: ctx, in, opts
func (_m *AnywhatClient) UpdateAnything(ctx context.Context, in *pb.UpdateAnythingRequest, opts ...grpc.CallOption) (*pb.UpdateAnythingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.UpdateAnythingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateAnythingRequest, ...grpc.CallOption) *pb.UpdateAnythingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdateAnythingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateAnythingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
