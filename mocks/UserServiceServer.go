// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	pb "github.com/dhanusaputra/anywhat-server/api/pb"
)

// UserServiceServer is an autogenerated mock type for the UserServiceServer type
type UserServiceServer struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) CreateUser(_a0 context.Context, _a1 *pb.CreateUserRequest) (*pb.CreateUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.CreateUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateUserRequest) *pb.CreateUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreateUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) DeleteUser(_a0 context.Context, _a1 *pb.DeleteUserRequest) (*pb.DeleteUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.DeleteUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteUserRequest) *pb.DeleteUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) GetUser(_a0 context.Context, _a1 *pb.GetUserRequest) (*pb.GetUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetUserRequest) *pb.GetUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) ListUser(_a0 context.Context, _a1 *emptypb.Empty) (*pb.ListUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.ListUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) *pb.ListUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ListUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) Login(_a0 context.Context, _a1 *pb.LoginRequest) (*pb.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoginRequest) *pb.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) UpdateUser(_a0 context.Context, _a1 *pb.UpdateUserRequest) (*pb.UpdateUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.UpdateUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateUserRequest) *pb.UpdateUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdateUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
